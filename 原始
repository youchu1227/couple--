// Web App: 情侶溝通紀錄工具 - 進階功能擴充 (搜尋 + 圖表 + 共享紀錄)

import { useState, useEffect } from "react";
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  query,
  where,
  orderBy,
  serverTimestamp,
} from "firebase/firestore";
import {
  getAuth,
  signInWithPopup,
  GoogleAuthProvider,
  onAuthStateChanged,
  signOut,
} from "firebase/auth";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

const firebaseConfig = {
  apiKey: "AIzaSyXXXXXX",
  authDomain: "your-app.firebaseapp.com",
  projectId: "your-app",
  storageBucket: "your-app.appspot.com",
  messagingSenderId: "1234567890",
  appId: "1:1234567890:web:abcdefghij123456",
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

export default function CoupleLogApp() {
  const [user, setUser] = useState(null);
  const [dialogue, setDialogue] = useState("");
  const [emotion, setEmotion] = useState("");
  const [quote, setQuote] = useState("");
  const [sharedCode, setSharedCode] = useState("");
  const [status, setStatus] = useState("");
  const [entries, setEntries] = useState([]);
  const [searchKeyword, setSearchKeyword] = useState("");

  const emotions = ["😊", "😐", "😟", "❤️", "😢"];

  useEffect(() => {
    onAuthStateChanged(auth, (u) => {
      setUser(u);
      if (u) loadEntries(u);
    });
  }, []);

  const loadEntries = async (u) => {
    const q = query(
      collection(db, "entries"),
      where("sharedCode", "in", [null, sharedCode || ""]),
      orderBy("createdAt", "desc")
    );
    const querySnapshot = await getDocs(q);
    setEntries(
      querySnapshot.docs
        .map((doc) => ({ id: doc.id, ...doc.data() }))
        .filter(
          (e) => e.uid === u.uid || (sharedCode && e.sharedCode === sharedCode)
        )
    );
  };

  const login = async () => {
    const provider = new GoogleAuthProvider();
    await signInWithPopup(auth, provider);
  };

  const logout = async () => {
    await signOut(auth);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!user) return;
    try {
      await addDoc(collection(db, "entries"), {
        uid: user.uid,
        sharedCode: sharedCode || null,
        dialogue,
        emotion,
        quote,
        createdAt: serverTimestamp(),
      });
      setDialogue("");
      setEmotion("");
      setQuote("");
      setStatus("✅ 已儲存！");
      loadEntries(user);
    } catch (error) {
      setStatus("❌ 儲存失敗");
    }
  };

  const filteredEntries = entries.filter(
    (e) =>
      e.dialogue?.includes(searchKeyword) ||
      e.quote?.includes(searchKeyword)
  );

  const emotionStats = emotions.map((emo) => ({
    name: emo,
    count: entries.filter((e) => e.emotion === emo).length,
  }));

  return (
    <div className="p-4 max-w-md mx-auto bg-pink-100 rounded-2xl shadow-lg mt-8">
      <h2 className="text-2xl font-bold text-center text-rose-600 mb-4">
        情侶溝通紀錄工具
      </h2>

      {!user ? (
        <button
          onClick={login}
          className="w-full bg-green-500 text-white p-2 rounded-xl mb-4"
        >
          使用 Google 登入
        </button>
      ) : (
        <div className="mb-4 text-sm text-center">
          👤 {user.displayName} <br />
          <button
            onClick={logout}
            className="text-blue-600 underline mt-1"
          >
            登出
          </button>
        </div>
      )}

      {user && (
        <form onSubmit={handleSubmit}>
          <label className="block mb-2 font-medium">今天的對話：</label>
          <textarea
            className="w-full p-2 rounded border mb-4"
            value={dialogue}
            onChange={(e) => setDialogue(e.target.value)}
          />

          <label className="block mb-2 font-medium">情感變化：</label>
          <div className="flex space-x-2 mb-4">
            {emotions.map((emo, idx) => (
              <button
                key={idx}
                type="button"
                className={`p-2 text-xl rounded-full border ${
                  emotion === emo ? "bg-red-300" : "bg-white"
                }`}
                onClick={() => setEmotion(emo)}
              >
                {emo}
              </button>
            ))}
          </div>

          <label className="block mb-2 font-medium">難忘的一句話：</label>
          <input
            type="text"
            className="w-full p-2 rounded border mb-4"
            value={quote}
            onChange={(e) => setQuote(e.target.value)}
          />

          <label className="block mb-2 font-medium">共享配對碼（可選）：</label>
          <input
            type="text"
            className="w-full p-2 rounded border mb-4"
            value={sharedCode}
            onChange={(e) => setSharedCode(e.target.value)}
          />

          <button
            type="submit"
            className="w-full bg-rose-500 text-white p-2 rounded-xl hover:bg-rose-600"
          >
            儲存
          </button>
        </form>
      )}

      {status && <p className="mt-4 text-center text-sm">{status}</p>}

      {entries.length > 0 && (
        <div className="mt-6 space-y-4">
          <div>
            <h3 className="font-bold mb-2">🔍 搜尋紀錄：</h3>
            <input
              type="text"
              className="w-full p-2 rounded border"
              value={searchKeyword}
              onChange={(e) => setSearchKeyword(e.target.value)}
              placeholder="輸入關鍵字搜尋..."
            />
          </div>

          <div>
            <h3 className="font-bold mb-2">📊 情緒統計：</h3>
            <div className="bg-white p-2 rounded-xl">
              <ResponsiveContainer width="100%" height={200}>
                <BarChart data={emotionStats}>
                  <XAxis dataKey="name" />
                  <YAxis allowDecimals={false} />
                  <Tooltip />
                  <Bar dataKey="count" fill="#f43f5e" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>

          <div>
            <h3 className="font-bold mb-2">🗂️ 紀錄列表：</h3>
            <ul className="space-y-2 text-sm">
              {filteredEntries.map((entry, i) => (
                <li
                  key={i}
                  className="bg-white rounded p-2 shadow border border-rose-100"
                >
                  <div>
                    🗓️ {entry.createdAt?.toDate().toLocaleString() || "時間不明"}
                  </div>
                  <div>💬 {entry.dialogue}</div>
                  <div>😶‍🌫️ 情緒：{entry.emotion}</div>
                  {entry.quote && <div>🔖 「{entry.quote}」</div>}
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}
    </div>
  );
}
